link - https://leetcode.com/problems/sudoku-solver/description/

solution :

class Solution {
    public void solveSudoku(char[][] board) {
        int n= board.length;
        int[][] maze= new int[n][n];

        for(int i=0;i<n;i++)
         for(int j=0;j<n;j++)
         {
             if(board[i][j]=='.')
             maze[i][j]=0;
             else
             maze[i][j]= board[i][j] - 48;
         }
         solve(maze);

         for(int i=0;i<n;i++)
         for(int j=0;j<n;j++)
         {
             if(maze[i][j]==0)
             board[i][j]='.';
             else
             board[i][j]=(char) (maze[i][j] + 48);
         }
    }
    private static boolean solve(int[][] maze){
        int n= maze.length;
        int row= -1;
        int col=-1;
        boolean empty =true;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(maze[i][j]==0)
                {
                    row=i;
                    col=j;
                    empty= false;
                    break;
                }
            }

            if(empty==false)
            break;
        }

        if(empty)
        return true;

        for(int num=1; num<=9; num++)
        {
            if(isSafe(maze, row,col,num)){
                maze[row][col]=num;
                if(solve(maze))
                return true;

                else
                maze[row][col]=0;
            }
        }

// sudoku not solved
        return false;

    }

    private static boolean isSafe(int[][] board, int row, int col, int num){
        //        for row check
        for (int i=0;i<board.length;i++)
            if (board[row][i]==num)
                return false;

//        for column check
        for (int[] nums:board)
            if (nums[col]==num)
                return false;

//        for checking entire sub matrix
        int sqrt = (int)(Math.sqrt(board.length));
        int rowStart= row - row%sqrt;
        int colStart= col - col%sqrt;

        for (int r= rowStart; r< rowStart+sqrt;r++)
            for (int c=colStart; c<colStart+sqrt;c++)
                if (board[r][c]==num)
                    return false;

        return true; //safe to place the number in given cell.
    }
}