https://leetcode.com/problems/search-in-rotated-sorted-array/

solution :

class Solution {
    public int search(int[] nums, int target) {
        if(nums.length==1)
            return nums[0]==target? 0:-1;
        int pivot = findPivot(nums);
        if(pivot==-1)
            return binarySearch(nums,0,nums.length-1,target);
        int firstFind= binarySearch(nums,0, pivot, target);
        if(firstFind==-1)
            firstFind= binarySearch(nums, pivot+1, nums.length-1,target);
        
        return firstFind;
    }
    
    int findPivot(int[] nums){
    int n= nums.length;
        int s=0, e=nums.length-1;
        while(s<e){
            int mid= s+(e-s)/2;
            if(mid<n-1 && nums[mid]>nums[mid+1])
                return mid;
            else if(nums[mid]>nums[0])
                s=mid+1;
            else
                e=mid;
        }
        return -1;
    }
    
    int binarySearch(int[] arr, int s, int e, int target){
        while(s<=e){
            int mid= s+(e-s)/2;
            if(arr[mid]==target)
                return mid;
            else if(arr[mid]>target)
                e=mid-1;
            else
                s=mid+1;
        }
        
        return -1;
    }
    
}